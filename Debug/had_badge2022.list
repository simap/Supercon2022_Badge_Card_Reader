
had_badge2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000211c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080021dc  080021dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021fc  080021fc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080021fc  080021fc  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021fc  080021fc  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08002204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200000a4  080022a8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080022a8  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000572c  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015aa  00000000  00000000  000257f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  00026da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  00027550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000be9a  00000000  00000000  00027c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005acf  00000000  00000000  00033af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003f95d  00000000  00000000  000395c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00078f1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a38  00000000  00000000  00078f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a4 	.word	0x200000a4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021c4 	.word	0x080021c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a8 	.word	0x200000a8
 8000104:	080021c4 	.word	0x080021c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	2207      	movs	r2, #7
 8000230:	4393      	bics	r3, r2
 8000232:	001a      	movs	r2, r3
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	431a      	orrs	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	615a      	str	r2, [r3, #20]
}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}

08000244 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <LL_ADC_Enable+0x20>)
 8000252:	4013      	ands	r3, r2
 8000254:	2201      	movs	r2, #1
 8000256:	431a      	orrs	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bd80      	pop	{r7, pc}
 8000264:	7fffffe8 	.word	0x7fffffe8

08000268 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <LL_SYSTICK_EnableIT+0x18>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b03      	ldr	r3, [pc, #12]	; (8000280 <LL_SYSTICK_EnableIT+0x18>)
 8000272:	2102      	movs	r1, #2
 8000274:	430a      	orrs	r2, r1
 8000276:	601a      	str	r2, [r3, #0]
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	e000e010 	.word	0xe000e010

08000284 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	2201      	movs	r2, #1
 8000292:	431a      	orrs	r2, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	60da      	str	r2, [r3, #12]
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}

080002a0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2201      	movs	r2, #1
 80002ae:	431a      	orrs	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}

080002bc <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	69db      	ldr	r3, [r3, #28]
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	4013      	ands	r3, r2
 80002cc:	2b80      	cmp	r3, #128	; 0x80
 80002ce:	d101      	bne.n	80002d4 <LL_USART_IsActiveFlag_TXE+0x18>
 80002d0:	2301      	movs	r3, #1
 80002d2:	e000      	b.n	80002d6 <LL_USART_IsActiveFlag_TXE+0x1a>
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	0018      	movs	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	b002      	add	sp, #8
 80002dc:	bd80      	pop	{r7, pc}

080002de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b082      	sub	sp, #8
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
 80002e6:	000a      	movs	r2, r1
 80002e8:	1cfb      	adds	r3, r7, #3
 80002ea:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 80002ec:	1cfb      	adds	r3, r7, #3
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	b002      	add	sp, #8
 80002fc:	bd80      	pop	{r7, pc}

080002fe <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b082      	sub	sp, #8
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
 8000306:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	691b      	ldr	r3, [r3, #16]
 800030c:	683a      	ldr	r2, [r7, #0]
 800030e:	4013      	ands	r3, r2
 8000310:	683a      	ldr	r2, [r7, #0]
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	425a      	negs	r2, r3
 8000316:	4153      	adcs	r3, r2
 8000318:	b2db      	uxtb	r3, r3
}
 800031a:	0018      	movs	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	b002      	add	sp, #8
 8000320:	bd80      	pop	{r7, pc}

08000322 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000322:	b580      	push	{r7, lr}
 8000324:	b082      	sub	sp, #8
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
 800032a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	619a      	str	r2, [r3, #24]
}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b002      	add	sp, #8
 8000338:	bd80      	pop	{r7, pc}

0800033a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800033a:	b580      	push	{r7, lr}
 800033c:	b082      	sub	sp, #8
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
 8000342:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	629a      	str	r2, [r3, #40]	; 0x28
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <initAdc>:

uint16_t program[32 * 4];
int programPageCount;


void initAdc() {
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

	LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_55CYCLES_5);
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <initAdc+0x1c>)
 800035a:	2105      	movs	r1, #5
 800035c:	0018      	movs	r0, r3
 800035e:	f7ff ff5f 	bl	8000220 <LL_ADC_SetSamplingTimeCommonChannels>

	LL_ADC_Enable(ADC1);
 8000362:	4b03      	ldr	r3, [pc, #12]	; (8000370 <initAdc+0x1c>)
 8000364:	0018      	movs	r0, r3
 8000366:	f7ff ff6d 	bl	8000244 <LL_ADC_Enable>
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40012400 	.word	0x40012400

08000374 <initTim1>:

void initTim1() {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

	TIM1->PSC = 0;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <initTim1+0x38>)
 800037a:	2200      	movs	r2, #0
 800037c:	629a      	str	r2, [r3, #40]	; 0x28

	TIM1->ARR = 4799; //48mhz / 4800 = 10khz
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <initTim1+0x38>)
 8000380:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <initTim1+0x3c>)
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CR1 |= TIM_CR1_CEN | TIM_CR1_ARPE; // enable and auto-reload (why?)
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <initTim1+0x38>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <initTim1+0x38>)
 800038a:	2181      	movs	r1, #129	; 0x81
 800038c:	430a      	orrs	r2, r1
 800038e:	601a      	str	r2, [r3, #0]
	TIM1->CR1 |= TIM_CR1_CEN ; // enable
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <initTim1+0x38>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <initTim1+0x38>)
 8000396:	2101      	movs	r1, #1
 8000398:	430a      	orrs	r2, r1
 800039a:	601a      	str	r2, [r3, #0]

	LL_TIM_EnableIT_UPDATE(TIM1);
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <initTim1+0x38>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f7ff ff70 	bl	8000284 <LL_TIM_EnableIT_UPDATE>
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	40012c00 	.word	0x40012c00
 80003b0:	000012bf 	.word	0x000012bf

080003b4 <initDma>:

void initDma() {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	//configure DMA to read from ADC into a buffer
	DMA1_Channel1->CPAR = (uint32_t) (&(ADC1->DR)); //point dma to ADC data reg
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <initDma+0x28>)
 80003ba:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <initDma+0x2c>)
 80003bc:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t) (adcBuffer); //point DMA to buffer memory
 80003be:	4b07      	ldr	r3, [pc, #28]	; (80003dc <initDma+0x28>)
 80003c0:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <initDma+0x30>)
 80003c2:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = 13; //count of transfers per circle
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <initDma+0x28>)
 80003c6:	220d      	movs	r2, #13
 80003c8:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CCR |= DMA_CCR_EN; //enable channel 1 dma
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <initDma+0x28>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	4b03      	ldr	r3, [pc, #12]	; (80003dc <initDma+0x28>)
 80003d0:	2101      	movs	r1, #1
 80003d2:	430a      	orrs	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]

}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40020008 	.word	0x40020008
 80003e0:	40012440 	.word	0x40012440
 80003e4:	200000c4 	.word	0x200000c4

080003e8 <nextSequence>:


/*
 * Each time the timer fires bounce back and forth between changing the LED, and starting an ADC sample
 */
void nextSequence() {
 80003e8:	b5b0      	push	{r4, r5, r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	static int toggle = 0;

	if (toggle) {
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <nextSequence+0x64>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d01f      	beq.n	8000434 <nextSequence+0x4c>
		setLed(scanNumber);
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <nextSequence+0x68>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 fac9 	bl	8000990 <setLed>
		toggle = 0;
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <nextSequence+0x64>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
		scanNumber++;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <nextSequence+0x68>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	1c5a      	adds	r2, r3, #1
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <nextSequence+0x68>)
 800040c:	601a      	str	r2, [r3, #0]
		if (scanNumber >= 13) {
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <nextSequence+0x68>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b0c      	cmp	r3, #12
 8000414:	dd17      	ble.n	8000446 <nextSequence+0x5e>
			scanNumber = 0;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <nextSequence+0x68>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
			memcpy(currentRow, adcBuffer, sizeof(currentRow));
 800041c:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <nextSequence+0x6c>)
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <nextSequence+0x70>)
 8000420:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000422:	c313      	stmia	r3!, {r0, r1, r4}
 8000424:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000426:	c313      	stmia	r3!, {r0, r1, r4}
 8000428:	8812      	ldrh	r2, [r2, #0]
 800042a:	801a      	strh	r2, [r3, #0]
			rowReady = 1;
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <nextSequence+0x74>)
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]
		}
	} else {
		ADC1->CR |= ADC_CR_ADSTART;
		toggle = 1;
	}
}
 8000432:	e008      	b.n	8000446 <nextSequence+0x5e>
		ADC1->CR |= ADC_CR_ADSTART;
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <nextSequence+0x78>)
 8000436:	689a      	ldr	r2, [r3, #8]
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <nextSequence+0x78>)
 800043a:	2104      	movs	r1, #4
 800043c:	430a      	orrs	r2, r1
 800043e:	609a      	str	r2, [r3, #8]
		toggle = 1;
 8000440:	4b02      	ldr	r3, [pc, #8]	; (800044c <nextSequence+0x64>)
 8000442:	2201      	movs	r2, #1
 8000444:	601a      	str	r2, [r3, #0]
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bdb0      	pop	{r4, r5, r7, pc}
 800044c:	20000258 	.word	0x20000258
 8000450:	200000fc 	.word	0x200000fc
 8000454:	200000e0 	.word	0x200000e0
 8000458:	200000c4 	.word	0x200000c4
 800045c:	20000100 	.word	0x20000100
 8000460:	40012400 	.word	0x40012400

08000464 <resetState>:


void resetState() {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	syncMode = WAIT_FOR_PAGE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <resetState+0x44>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	memset(program, 0, sizeof(program));
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	005a      	lsls	r2, r3, #1
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <resetState+0x48>)
 8000474:	2100      	movs	r1, #0
 8000476:	0018      	movs	r0, r3
 8000478:	f001 fe9c 	bl	80021b4 <memset>
	programPageCount = 0;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <resetState+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]

	memset(page, 0, sizeof(page));
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <resetState+0x50>)
 8000484:	2240      	movs	r2, #64	; 0x40
 8000486:	2100      	movs	r1, #0
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fe93 	bl	80021b4 <memset>
	currentWordIndex = 0;
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <resetState+0x54>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]

	scanStartTimer = ms;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <resetState+0x58>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <resetState+0x5c>)
 800049a:	601a      	str	r2, [r3, #0]
	totalScanWordCount = 0;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <resetState+0x60>)
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000104 	.word	0x20000104
 80004ac:	20000154 	.word	0x20000154
 80004b0:	20000254 	.word	0x20000254
 80004b4:	20000108 	.word	0x20000108
 80004b8:	20000148 	.word	0x20000148
 80004bc:	200000c0 	.word	0x200000c0
 80004c0:	2000014c 	.word	0x2000014c
 80004c4:	20000150 	.word	0x20000150

080004c8 <sendCh>:

void sendCh(uint8_t c) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	0002      	movs	r2, r0
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	701a      	strb	r2, [r3, #0]
	LL_USART_TransmitData8(USART1, c);
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <sendCh+0x34>)
 80004da:	0019      	movs	r1, r3
 80004dc:	0010      	movs	r0, r2
 80004de:	f7ff fefe 	bl	80002de <LL_USART_TransmitData8>

	while (!LL_USART_IsActiveFlag_TXE(USART1))
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <sendCh+0x34>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f7ff fee8 	bl	80002bc <LL_USART_IsActiveFlag_TXE>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d0f9      	beq.n	80004e4 <sendCh+0x1c>
		;//wait
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40013800 	.word	0x40013800

08000500 <sendWord>:


void sendWord(uint16_t w) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	0002      	movs	r2, r0
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	801a      	strh	r2, [r3, #0]
	LL_USART_TransmitData8(USART1, w & 0xff);
 800050c:	1dbb      	adds	r3, r7, #6
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <sendWord+0x58>)
 8000514:	0019      	movs	r1, r3
 8000516:	0010      	movs	r0, r2
 8000518:	f7ff fee1 	bl	80002de <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TXE(USART1))
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <sendWord+0x58>)
 8000520:	0018      	movs	r0, r3
 8000522:	f7ff fecb 	bl	80002bc <LL_USART_IsActiveFlag_TXE>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d0f9      	beq.n	800051e <sendWord+0x1e>
		;//wait

	LL_USART_TransmitData8(USART1, w>>8);
 800052a:	1dbb      	adds	r3, r7, #6
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	b29b      	uxth	r3, r3
 8000532:	b2db      	uxtb	r3, r3
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <sendWord+0x58>)
 8000536:	0019      	movs	r1, r3
 8000538:	0010      	movs	r0, r2
 800053a:	f7ff fed0 	bl	80002de <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TXE(USART1))
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <sendWord+0x58>)
 8000542:	0018      	movs	r0, r3
 8000544:	f7ff feba 	bl	80002bc <LL_USART_IsActiveFlag_TXE>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d0f9      	beq.n	8000540 <sendWord+0x40>
		;//wait

}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40013800 	.word	0x40013800

0800055c <sendProgram>:

void sendProgram() {
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0

	//TODO do we need to trim off trailing zero instructions? the badge does. Only counts the last nonzero one.
	uint16_t wordCount = 0;
 8000562:	230e      	movs	r3, #14
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	2200      	movs	r2, #0
 8000568:	801a      	strh	r2, [r3, #0]
	uint16_t checksum = 0;
 800056a:	230c      	movs	r3, #12
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	2200      	movs	r2, #0
 8000570:	801a      	strh	r2, [r3, #0]

	for (int i = 0; i < programPageCount * 32; i++) {
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	e00e      	b.n	8000596 <sendProgram+0x3a>
		if (program[i]) {
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <sendProgram+0xd4>)
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	0052      	lsls	r2, r2, #1
 800057e:	5ad3      	ldrh	r3, [r2, r3]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d005      	beq.n	8000590 <sendProgram+0x34>
			wordCount = i+1;
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	b29a      	uxth	r2, r3
 8000588:	230e      	movs	r3, #14
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	3201      	adds	r2, #1
 800058e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < programPageCount * 32; i++) {
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	3301      	adds	r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	4b27      	ldr	r3, [pc, #156]	; (8000634 <sendProgram+0xd8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbea      	blt.n	8000578 <sendProgram+0x1c>
	1. Header 6 bytes: 00 FF 00 FF A5 C3
	2. Program length 2 bytes (in 16-bit words, Low byte first): NN NN
	3. Program NN 0N×Program Length (Low first): NN 0N, NN 0N, NN 0N...
	4. 16-bit Checksum 2 bytes (items 2 and 3 only, Low first): NN NN
	 */
	sendCh(0x00);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff ff90 	bl	80004c8 <sendCh>
	sendCh(0xFF);
 80005a8:	20ff      	movs	r0, #255	; 0xff
 80005aa:	f7ff ff8d 	bl	80004c8 <sendCh>
	sendCh(0x00);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff ff8a 	bl	80004c8 <sendCh>
	sendCh(0xFF);
 80005b4:	20ff      	movs	r0, #255	; 0xff
 80005b6:	f7ff ff87 	bl	80004c8 <sendCh>
	sendCh(0xA5);
 80005ba:	20a5      	movs	r0, #165	; 0xa5
 80005bc:	f7ff ff84 	bl	80004c8 <sendCh>
	sendCh(0xC3);
 80005c0:	20c3      	movs	r0, #195	; 0xc3
 80005c2:	f7ff ff81 	bl	80004c8 <sendCh>

	sendWord(wordCount);
 80005c6:	240e      	movs	r4, #14
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff ff97 	bl	8000500 <sendWord>
	checksum += wordCount;
 80005d2:	220c      	movs	r2, #12
 80005d4:	18bb      	adds	r3, r7, r2
 80005d6:	18b9      	adds	r1, r7, r2
 80005d8:	193a      	adds	r2, r7, r4
 80005da:	8809      	ldrh	r1, [r1, #0]
 80005dc:	8812      	ldrh	r2, [r2, #0]
 80005de:	188a      	adds	r2, r1, r2
 80005e0:	801a      	strh	r2, [r3, #0]

	for (int i = 0; i < wordCount; i++) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	e013      	b.n	8000610 <sendProgram+0xb4>
		sendWord(program[i]);
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <sendProgram+0xd4>)
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	0052      	lsls	r2, r2, #1
 80005ee:	5ad3      	ldrh	r3, [r2, r3]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f7ff ff85 	bl	8000500 <sendWord>
		checksum += program[i];
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <sendProgram+0xd4>)
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	0052      	lsls	r2, r2, #1
 80005fc:	5ad1      	ldrh	r1, [r2, r3]
 80005fe:	220c      	movs	r2, #12
 8000600:	18bb      	adds	r3, r7, r2
 8000602:	18ba      	adds	r2, r7, r2
 8000604:	8812      	ldrh	r2, [r2, #0]
 8000606:	188a      	adds	r2, r1, r2
 8000608:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < wordCount; i++) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	230e      	movs	r3, #14
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbe5      	blt.n	80005e8 <sendProgram+0x8c>
	}

	sendWord(checksum);
 800061c:	230c      	movs	r3, #12
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	0018      	movs	r0, r3
 8000624:	f7ff ff6c 	bl	8000500 <sendWord>

}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b005      	add	sp, #20
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	20000154 	.word	0x20000154
 8000634:	20000254 	.word	0x20000254

08000638 <errorFlash>:

void errorFlash() {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	uint32_t timer = ms;
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <errorFlash+0x3c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	607b      	str	r3, [r7, #4]
	while (ms - timer < 1000) {
 8000644:	e009      	b.n	800065a <errorFlash+0x22>
		LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	00da      	lsls	r2, r3, #3
 800064a:	2390      	movs	r3, #144	; 0x90
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff fe72 	bl	800033a <LL_GPIO_ResetOutputPin>
		if (ms & 0x100) {
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <errorFlash+0x3c>)
 8000658:	681b      	ldr	r3, [r3, #0]
	while (ms - timer < 1000) {
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <errorFlash+0x3c>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	1ad2      	subs	r2, r2, r3
 8000662:	23fa      	movs	r3, #250	; 0xfa
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	429a      	cmp	r2, r3
 8000668:	d3ed      	bcc.n	8000646 <errorFlash+0xe>
//			LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
		}
	}
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000c0 	.word	0x200000c0

08000678 <run>:


void run() {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0


	DBGMCU->APB1FZ = 0xffffffff;
 800067e:	4b9a      	ldr	r3, [pc, #616]	; (80008e8 <run+0x270>)
 8000680:	2201      	movs	r2, #1
 8000682:	4252      	negs	r2, r2
 8000684:	609a      	str	r2, [r3, #8]
	DBGMCU->APB2FZ = 0xffffffff;
 8000686:	4b98      	ldr	r3, [pc, #608]	; (80008e8 <run+0x270>)
 8000688:	2201      	movs	r2, #1
 800068a:	4252      	negs	r2, r2
 800068c:	60da      	str	r2, [r3, #12]

	setLed(scanNumber);
 800068e:	4b97      	ldr	r3, [pc, #604]	; (80008ec <run+0x274>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f97c 	bl	8000990 <setLed>
	scanNumber++; //next scan should be 1
 8000698:	4b94      	ldr	r3, [pc, #592]	; (80008ec <run+0x274>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	4b93      	ldr	r3, [pc, #588]	; (80008ec <run+0x274>)
 80006a0:	601a      	str	r2, [r3, #0]

	initAdc();
 80006a2:	f7ff fe57 	bl	8000354 <initAdc>
	initDma();
 80006a6:	f7ff fe85 	bl	80003b4 <initDma>
	initTim1();
 80006aa:	f7ff fe63 	bl	8000374 <initTim1>
	LL_USART_Enable(USART1);
 80006ae:	4b90      	ldr	r3, [pc, #576]	; (80008f0 <run+0x278>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff fdf5 	bl	80002a0 <LL_USART_Enable>

	LL_SYSTICK_EnableIT();
 80006b6:	f7ff fdd7 	bl	8000268 <LL_SYSTICK_EnableIT>
//
//		continue;


		//check for a complete row
		if (rowReady) {
 80006ba:	4b8e      	ldr	r3, [pc, #568]	; (80008f4 <run+0x27c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d100      	bne.n	80006c4 <run+0x4c>
 80006c2:	e10a      	b.n	80008da <run+0x262>
			rowReady = 0;
 80006c4:	4b8b      	ldr	r3, [pc, #556]	; (80008f4 <run+0x27c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]

			LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	00da      	lsls	r2, r3, #3
 80006ce:	2390      	movs	r3, #144	; 0x90
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fe30 	bl	800033a <LL_GPIO_ResetOutputPin>


			switch (syncMode) {
 80006da:	4b87      	ldr	r3, [pc, #540]	; (80008f8 <run+0x280>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d009      	beq.n	80006f6 <run+0x7e>
 80006e2:	dcea      	bgt.n	80006ba <run+0x42>
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d100      	bne.n	80006ea <run+0x72>
 80006e8:	e087      	b.n	80007fa <run+0x182>
 80006ea:	dce6      	bgt.n	80006ba <run+0x42>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d010      	beq.n	8000712 <run+0x9a>
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d03a      	beq.n	800076a <run+0xf2>
 80006f4:	e0f6      	b.n	80008e4 <run+0x26c>

			case PAGE_ERROR:

				if (ms & 0x200) {
 80006f6:	4b81      	ldr	r3, [pc, #516]	; (80008fc <run+0x284>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4013      	ands	r3, r2
 8000700:	d007      	beq.n	8000712 <run+0x9a>
					LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	00da      	lsls	r2, r3, #3
 8000706:	2390      	movs	r3, #144	; 0x90
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff fe08 	bl	8000322 <LL_GPIO_SetOutputPin>
				}

				//fall through
			case WAIT_FOR_PAGE:
				scanStartTimer = ms;
 8000712:	4b7a      	ldr	r3, [pc, #488]	; (80008fc <run+0x284>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b7a      	ldr	r3, [pc, #488]	; (8000900 <run+0x288>)
 8000718:	601a      	str	r2, [r3, #0]
				totalScanWordCount = 0;
 800071a:	4b7a      	ldr	r3, [pc, #488]	; (8000904 <run+0x28c>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
				currentWordIndex = 0;
 8000720:	4b79      	ldr	r3, [pc, #484]	; (8000908 <run+0x290>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]

				if (!LL_GPIO_IsInputPinSet(BTN_GPIO_Port, BTN_Pin)) {
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	009a      	lsls	r2, r3, #2
 800072a:	2390      	movs	r3, #144	; 0x90
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f7ff fde4 	bl	80002fe <LL_GPIO_IsInputPinSet>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d117      	bne.n	800076a <run+0xf2>
					if (programPageCount > 0) {
 800073a:	4b74      	ldr	r3, [pc, #464]	; (800090c <run+0x294>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	dd11      	ble.n	8000766 <run+0xee>
						//transmit program!!!!
						LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	00da      	lsls	r2, r3, #3
 8000746:	2390      	movs	r3, #144	; 0x90
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff fde8 	bl	8000322 <LL_GPIO_SetOutputPin>
						sendProgram();
 8000752:	f7ff ff03 	bl	800055c <sendProgram>
						LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	00da      	lsls	r2, r3, #3
 800075a:	2390      	movs	r3, #144	; 0x90
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fdea 	bl	800033a <LL_GPIO_ResetOutputPin>
					}

					resetState();
 8000766:	f7ff fe7d 	bl	8000464 <resetState>

				//fall through
			case WAIT_FOR_SYNC:

				//is the sync bit going low?
				if (currentRow[0] < LOW_THRESHOLD) {
 800076a:	4b69      	ldr	r3, [pc, #420]	; (8000910 <run+0x298>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	b29b      	uxth	r3, r3
 8000770:	001a      	movs	r2, r3
 8000772:	4b68      	ldr	r3, [pc, #416]	; (8000914 <run+0x29c>)
 8000774:	429a      	cmp	r2, r3
 8000776:	da0d      	bge.n	8000794 <run+0x11c>
					syncMode = IN_SYNC;
 8000778:	4b5f      	ldr	r3, [pc, #380]	; (80008f8 <run+0x280>)
 800077a:	2202      	movs	r2, #2
 800077c:	701a      	strb	r2, [r3, #0]
					scanStartTimer = ms;
 800077e:	4b5f      	ldr	r3, [pc, #380]	; (80008fc <run+0x284>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b5f      	ldr	r3, [pc, #380]	; (8000900 <run+0x288>)
 8000784:	601a      	str	r2, [r3, #0]
					//clear this word
					page[currentWordIndex] = 0;
 8000786:	4b60      	ldr	r3, [pc, #384]	; (8000908 <run+0x290>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b63      	ldr	r3, [pc, #396]	; (8000918 <run+0x2a0>)
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	2100      	movs	r1, #0
 8000790:	52d1      	strh	r1, [r2, r3]
						}
						programPageCount++;
					}
				}

				break;
 8000792:	e0a4      	b.n	80008de <run+0x266>
				} else if (ms - scanStartTimer > PAGE_TIMEOUT_MS) {
 8000794:	4b59      	ldr	r3, [pc, #356]	; (80008fc <run+0x284>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b59      	ldr	r3, [pc, #356]	; (8000900 <run+0x288>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a5f      	ldr	r2, [pc, #380]	; (800091c <run+0x2a4>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d800      	bhi.n	80007a6 <run+0x12e>
 80007a4:	e09b      	b.n	80008de <run+0x266>
					if (totalScanWordCount != 32) {
 80007a6:	4b57      	ldr	r3, [pc, #348]	; (8000904 <run+0x28c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	d005      	beq.n	80007ba <run+0x142>
						syncMode = PAGE_ERROR;
 80007ae:	4b52      	ldr	r3, [pc, #328]	; (80008f8 <run+0x280>)
 80007b0:	2203      	movs	r2, #3
 80007b2:	701a      	strb	r2, [r3, #0]
						errorFlash();
 80007b4:	f7ff ff40 	bl	8000638 <errorFlash>
						break;
 80007b8:	e094      	b.n	80008e4 <run+0x26c>
						syncMode = WAIT_FOR_PAGE;
 80007ba:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <run+0x280>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
						for (int i = 0; i < 32; i++) {
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	e010      	b.n	80007e8 <run+0x170>
							program[i + 32 * programPageCount] = page[31 - i];
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	221f      	movs	r2, #31
 80007ca:	1ad1      	subs	r1, r2, r3
 80007cc:	4b4f      	ldr	r3, [pc, #316]	; (800090c <run+0x294>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	015a      	lsls	r2, r3, #5
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	18d2      	adds	r2, r2, r3
 80007d6:	4b50      	ldr	r3, [pc, #320]	; (8000918 <run+0x2a0>)
 80007d8:	0049      	lsls	r1, r1, #1
 80007da:	5ac9      	ldrh	r1, [r1, r3]
 80007dc:	4b50      	ldr	r3, [pc, #320]	; (8000920 <run+0x2a8>)
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	52d1      	strh	r1, [r2, r3]
						for (int i = 0; i < 32; i++) {
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	3301      	adds	r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b1f      	cmp	r3, #31
 80007ec:	ddeb      	ble.n	80007c6 <run+0x14e>
						programPageCount++;
 80007ee:	4b47      	ldr	r3, [pc, #284]	; (800090c <run+0x294>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	4b45      	ldr	r3, [pc, #276]	; (800090c <run+0x294>)
 80007f6:	601a      	str	r2, [r3, #0]
				break;
 80007f8:	e071      	b.n	80008de <run+0x266>
			case IN_SYNC:

				//is sync bit going high?
				if (currentRow[0] > HIGH_THRESHOLD) {
 80007fa:	4b45      	ldr	r3, [pc, #276]	; (8000910 <run+0x298>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	001a      	movs	r2, r3
 8000802:	4b48      	ldr	r3, [pc, #288]	; (8000924 <run+0x2ac>)
 8000804:	429a      	cmp	r2, r3
 8000806:	dd21      	ble.n	800084c <run+0x1d4>
					syncMode = WAIT_FOR_SYNC;
 8000808:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <run+0x280>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
					scanStartTimer = ms;
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <run+0x284>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <run+0x288>)
 8000814:	601a      	str	r2, [r3, #0]
					currentWordIndex++;
 8000816:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <run+0x290>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	4b3a      	ldr	r3, [pc, #232]	; (8000908 <run+0x290>)
 800081e:	601a      	str	r2, [r3, #0]

					totalScanWordCount++;
 8000820:	4b38      	ldr	r3, [pc, #224]	; (8000904 <run+0x28c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	4b37      	ldr	r3, [pc, #220]	; (8000904 <run+0x28c>)
 8000828:	601a      	str	r2, [r3, #0]
					if (totalScanWordCount > 32) {
 800082a:	4b36      	ldr	r3, [pc, #216]	; (8000904 <run+0x28c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b20      	cmp	r3, #32
 8000830:	dd04      	ble.n	800083c <run+0x1c4>
						syncMode = PAGE_ERROR;
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <run+0x280>)
 8000834:	2203      	movs	r2, #3
 8000836:	701a      	strb	r2, [r3, #0]
						errorFlash();
 8000838:	f7ff fefe 	bl	8000638 <errorFlash>
					}

					if (currentWordIndex >= 32) {
 800083c:	4b32      	ldr	r3, [pc, #200]	; (8000908 <run+0x290>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b1f      	cmp	r3, #31
 8000842:	dd4e      	ble.n	80008e2 <run+0x26a>
						currentWordIndex = 0;
 8000844:	4b30      	ldr	r3, [pc, #192]	; (8000908 <run+0x290>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
					}
					break;
 800084a:	e04a      	b.n	80008e2 <run+0x26a>
				} else if (ms - scanStartTimer > PAGE_TIMEOUT_MS) {
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <run+0x284>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <run+0x288>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	4a31      	ldr	r2, [pc, #196]	; (800091c <run+0x2a4>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d905      	bls.n	8000868 <run+0x1f0>
					syncMode = PAGE_ERROR;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <run+0x280>)
 800085e:	2203      	movs	r2, #3
 8000860:	701a      	strb	r2, [r3, #0]
					errorFlash();
 8000862:	f7ff fee9 	bl	8000638 <errorFlash>
					break;
 8000866:	e03d      	b.n	80008e4 <run+0x26c>
				}

				//parse the word, checking the current row against low threshold
				uint16_t word = 0;
 8000868:	230a      	movs	r3, #10
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	2200      	movs	r2, #0
 800086e:	801a      	strh	r2, [r3, #0]
				for (int i = 0; i < 12; i++) {
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	e01e      	b.n	80008b4 <run+0x23c>
					volatile uint16_t bitReading = currentRow[i+1];
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <run+0x298>)
 800087c:	0052      	lsls	r2, r2, #1
 800087e:	5ad3      	ldrh	r3, [r2, r3]
 8000880:	b29a      	uxth	r2, r3
 8000882:	1cbb      	adds	r3, r7, #2
 8000884:	801a      	strh	r2, [r3, #0]
					if (bitReading < LOW_THRESHOLD) {
 8000886:	1cbb      	adds	r3, r7, #2
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	b29b      	uxth	r3, r3
 800088c:	001a      	movs	r2, r3
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <run+0x29c>)
 8000890:	429a      	cmp	r2, r3
 8000892:	da0c      	bge.n	80008ae <run+0x236>
						word |= 1<<i;
 8000894:	2201      	movs	r2, #1
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	409a      	lsls	r2, r3
 800089a:	0013      	movs	r3, r2
 800089c:	b21a      	sxth	r2, r3
 800089e:	210a      	movs	r1, #10
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2000      	movs	r0, #0
 80008a4:	5e1b      	ldrsh	r3, [r3, r0]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	801a      	strh	r2, [r3, #0]
				for (int i = 0; i < 12; i++) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b0b      	cmp	r3, #11
 80008b8:	dddd      	ble.n	8000876 <run+0x1fe>
					}
				}

				//set any bits in this word, preserving previous bits (make them sticky during sync)
				page[currentWordIndex] |= word;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <run+0x290>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <run+0x2a0>)
 80008c0:	0052      	lsls	r2, r2, #1
 80008c2:	5ad1      	ldrh	r1, [r2, r3]
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <run+0x290>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	230a      	movs	r3, #10
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	430b      	orrs	r3, r1
 80008d0:	b299      	uxth	r1, r3
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <run+0x2a0>)
 80008d4:	0052      	lsls	r2, r2, #1
 80008d6:	52d1      	strh	r1, [r2, r3]

				break;
 80008d8:	e004      	b.n	80008e4 <run+0x26c>

			}

		}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	e6ed      	b.n	80006ba <run+0x42>
				break;
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	e6eb      	b.n	80006ba <run+0x42>
					break;
 80008e2:	46c0      	nop			; (mov r8, r8)
		if (rowReady) {
 80008e4:	e6e9      	b.n	80006ba <run+0x42>
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40015800 	.word	0x40015800
 80008ec:	200000fc 	.word	0x200000fc
 80008f0:	40013800 	.word	0x40013800
 80008f4:	20000100 	.word	0x20000100
 80008f8:	20000104 	.word	0x20000104
 80008fc:	200000c0 	.word	0x200000c0
 8000900:	2000014c 	.word	0x2000014c
 8000904:	20000150 	.word	0x20000150
 8000908:	20000148 	.word	0x20000148
 800090c:	20000254 	.word	0x20000254
 8000910:	200000e0 	.word	0x200000e0
 8000914:	00000834 	.word	0x00000834
 8000918:	20000108 	.word	0x20000108
 800091c:	00001388 	.word	0x00001388
 8000920:	20000154 	.word	0x20000154
 8000924:	00000898 	.word	0x00000898

08000928 <LL_GPIO_SetPinMode>:
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	6819      	ldr	r1, [r3, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	435b      	muls	r3, r3
 800093c:	001a      	movs	r2, r3
 800093e:	0013      	movs	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	189b      	adds	r3, r3, r2
 8000944:	43db      	mvns	r3, r3
 8000946:	400b      	ands	r3, r1
 8000948:	001a      	movs	r2, r3
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	435b      	muls	r3, r3
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	434b      	muls	r3, r1
 8000952:	431a      	orrs	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b004      	add	sp, #16
 800095e:	bd80      	pop	{r7, pc}

08000960 <LL_GPIO_SetOutputPin>:
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	619a      	str	r2, [r3, #24]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <LL_GPIO_ResetOutputPin>:
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <setLed>:

		{SB_A3_GPIO_Port, SB_A3_Pin, SB_A4_GPIO_Port, SB_A4_Pin},
};


void setLed(int ledNum) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	//TODO maybe more efficient to write to MODER on A and B directly

	//set all to input

	LL_GPIO_SetPinMode(SB_A0_GPIO_Port, SB_A0_Pin, LL_GPIO_MODE_INPUT);
 8000998:	2390      	movs	r3, #144	; 0x90
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff ffc1 	bl	8000928 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(SB_A1_GPIO_Port, SB_A1_Pin, LL_GPIO_MODE_INPUT);
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <setLed+0xd0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	2102      	movs	r1, #2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff ffbb 	bl	8000928 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(SB_A2_GPIO_Port, SB_A2_Pin, LL_GPIO_MODE_INPUT);
 80009b2:	2390      	movs	r3, #144	; 0x90
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2200      	movs	r2, #0
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff ffb4 	bl	8000928 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(SB_A3_GPIO_Port, SB_A3_Pin, LL_GPIO_MODE_INPUT);
 80009c0:	2390      	movs	r3, #144	; 0x90
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	2200      	movs	r2, #0
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff ffad 	bl	8000928 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(SB_A4_GPIO_Port, SB_A4_Pin, LL_GPIO_MODE_INPUT);
 80009ce:	2390      	movs	r3, #144	; 0x90
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff ffa6 	bl	8000928 <LL_GPIO_SetPinMode>


	int dir = ledNum & 1;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
	PinPair * pair = &pinPairs[ledNum >> 1];
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	105b      	asrs	r3, r3, #1
 80009e8:	011a      	lsls	r2, r3, #4
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <setLed+0xd4>)
 80009ec:	18d3      	adds	r3, r2, r3
 80009ee:	60bb      	str	r3, [r7, #8]

	if (dir) {
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d010      	beq.n	8000a18 <setLed+0x88>
		LL_GPIO_ResetOutputPin(pair->portA, pair->pinA);
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	0019      	movs	r1, r3
 8000a00:	0010      	movs	r0, r2
 8000a02:	f7ff ffb9 	bl	8000978 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(pair->portB, pair->pinB);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	0019      	movs	r1, r3
 8000a10:	0010      	movs	r0, r2
 8000a12:	f7ff ffa5 	bl	8000960 <LL_GPIO_SetOutputPin>
 8000a16:	e00f      	b.n	8000a38 <setLed+0xa8>
	} else {
		LL_GPIO_ResetOutputPin(pair->portB, pair->pinB);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0019      	movs	r1, r3
 8000a22:	0010      	movs	r0, r2
 8000a24:	f7ff ffa8 	bl	8000978 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(pair->portA, pair->pinA);
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	0019      	movs	r1, r3
 8000a32:	0010      	movs	r0, r2
 8000a34:	f7ff ff94 	bl	8000960 <LL_GPIO_SetOutputPin>
	}

	LL_GPIO_SetPinMode(pair->portA,  pair->pinA, LL_GPIO_MODE_OUTPUT);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2201      	movs	r2, #1
 8000a42:	0019      	movs	r1, r3
 8000a44:	f7ff ff70 	bl	8000928 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(pair->portB,  pair->pinB, LL_GPIO_MODE_OUTPUT);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	6898      	ldr	r0, [r3, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	2201      	movs	r2, #1
 8000a52:	0019      	movs	r1, r3
 8000a54:	f7ff ff68 	bl	8000928 <LL_GPIO_SetPinMode>

}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b004      	add	sp, #16
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	48000400 	.word	0x48000400
 8000a64:	20000000 	.word	0x20000000

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b7f      	cmp	r3, #127	; 0x7f
 8000a7a:	d809      	bhi.n	8000a90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	001a      	movs	r2, r3
 8000a82:	231f      	movs	r3, #31
 8000a84:	401a      	ands	r2, r3
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <__NVIC_EnableIRQ+0x30>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4091      	lsls	r1, r2
 8000a8c:	000a      	movs	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]
  }
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab0:	d828      	bhi.n	8000b04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab2:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <__NVIC_SetPriority+0xd4>)
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	33c0      	adds	r3, #192	; 0xc0
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	589b      	ldr	r3, [r3, r2]
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	2203      	movs	r2, #3
 8000aca:	400a      	ands	r2, r1
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	21ff      	movs	r1, #255	; 0xff
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2303      	movs	r3, #3
 8000aea:	4003      	ands	r3, r0
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	481f      	ldr	r0, [pc, #124]	; (8000b70 <__NVIC_SetPriority+0xd4>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	33c0      	adds	r3, #192	; 0xc0
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b02:	e031      	b.n	8000b68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <__NVIC_SetPriority+0xd8>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	400b      	ands	r3, r1
 8000b10:	3b08      	subs	r3, #8
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	3306      	adds	r3, #6
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	18d3      	adds	r3, r2, r3
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1dfa      	adds	r2, r7, #7
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	0011      	movs	r1, r2
 8000b24:	2203      	movs	r2, #3
 8000b26:	400a      	ands	r2, r1
 8000b28:	00d2      	lsls	r2, r2, #3
 8000b2a:	21ff      	movs	r1, #255	; 0xff
 8000b2c:	4091      	lsls	r1, r2
 8000b2e:	000a      	movs	r2, r1
 8000b30:	43d2      	mvns	r2, r2
 8000b32:	401a      	ands	r2, r3
 8000b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	019b      	lsls	r3, r3, #6
 8000b3a:	22ff      	movs	r2, #255	; 0xff
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	2303      	movs	r3, #3
 8000b46:	4003      	ands	r3, r0
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <__NVIC_SetPriority+0xd8>)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	001c      	movs	r4, r3
 8000b54:	230f      	movs	r3, #15
 8000b56:	4023      	ands	r3, r4
 8000b58:	3b08      	subs	r3, #8
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	3306      	adds	r3, #6
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	18c3      	adds	r3, r0, r3
 8000b64:	3304      	adds	r3, #4
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b003      	add	sp, #12
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	2207      	movs	r2, #7
 8000b88:	4393      	bics	r3, r2
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	615a      	str	r2, [r3, #20]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <LL_ADC_REG_SetSequencerScanDirection>:
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	2204      	movs	r2, #4
 8000bac:	4393      	bics	r3, r2
 8000bae:	001a      	movs	r2, r3
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	60da      	str	r2, [r3, #12]
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <LL_ADC_REG_SetSequencerChAdd>:
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	035b      	lsls	r3, r3, #13
 8000bd2:	0b5b      	lsrs	r3, r3, #13
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LL_DMA_SetDataTransferDirection+0x40>)
 8000bf6:	5cd3      	ldrb	r3, [r2, r3]
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	18d3      	adds	r3, r2, r3
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <LL_DMA_SetDataTransferDirection+0x44>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	0019      	movs	r1, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <LL_DMA_SetDataTransferDirection+0x40>)
 8000c0c:	5cd3      	ldrb	r3, [r2, r3]
 8000c0e:	001a      	movs	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	18d3      	adds	r3, r2, r3
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	430a      	orrs	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b004      	add	sp, #16
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	080021dc 	.word	0x080021dc
 8000c28:	ffffbfef 	.word	0xffffbfef

08000c2c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LL_DMA_SetMode+0x40>)
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	001a      	movs	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	18d3      	adds	r3, r2, r3
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2220      	movs	r2, #32
 8000c4a:	4393      	bics	r3, r2
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <LL_DMA_SetMode+0x40>)
 8000c54:	5cd3      	ldrb	r3, [r2, r3]
 8000c56:	001a      	movs	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	18d3      	adds	r3, r2, r3
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
             Mode);
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b004      	add	sp, #16
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	080021dc 	.word	0x080021dc

08000c70 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	001a      	movs	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	18d3      	adds	r3, r2, r3
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2240      	movs	r2, #64	; 0x40
 8000c8e:	4393      	bics	r3, r2
 8000c90:	0019      	movs	r1, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c98:	5cd3      	ldrb	r3, [r2, r3]
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	18d3      	adds	r3, r2, r3
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	080021dc 	.word	0x080021dc

08000cb4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LL_DMA_SetMemoryIncMode+0x40>)
 8000cc6:	5cd3      	ldrb	r3, [r2, r3]
 8000cc8:	001a      	movs	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	18d3      	adds	r3, r2, r3
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	4393      	bics	r3, r2
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <LL_DMA_SetMemoryIncMode+0x40>)
 8000cdc:	5cd3      	ldrb	r3, [r2, r3]
 8000cde:	001a      	movs	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	18d3      	adds	r3, r2, r3
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	080021dc 	.word	0x080021dc

08000cf8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LL_DMA_SetPeriphSize+0x40>)
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	18d3      	adds	r3, r2, r3
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <LL_DMA_SetPeriphSize+0x44>)
 8000d16:	4013      	ands	r3, r2
 8000d18:	0019      	movs	r1, r3
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <LL_DMA_SetPeriphSize+0x40>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	001a      	movs	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	080021dc 	.word	0x080021dc
 8000d3c:	fffffcff 	.word	0xfffffcff

08000d40 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LL_DMA_SetMemorySize+0x40>)
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	001a      	movs	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <LL_DMA_SetMemorySize+0x44>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	0019      	movs	r1, r3
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <LL_DMA_SetMemorySize+0x40>)
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	18d3      	adds	r3, r2, r3
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b004      	add	sp, #16
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	080021dc 	.word	0x080021dc
 8000d84:	fffff3ff 	.word	0xfffff3ff

08000d88 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	18d3      	adds	r3, r2, r3
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	0019      	movs	r1, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	001a      	movs	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	080021dc 	.word	0x080021dc
 8000dcc:	ffffcfff 	.word	0xffffcfff

08000dd0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <LL_RCC_HSI_Enable+0x18>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <LL_RCC_HSI_Enable+0x18>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	40021000 	.word	0x40021000

08000dec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <LL_RCC_HSI_IsReady+0x1c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2202      	movs	r2, #2
 8000df6:	4013      	ands	r3, r2
 8000df8:	3b02      	subs	r3, #2
 8000dfa:	425a      	negs	r2, r3
 8000dfc:	4153      	adcs	r3, r2
 8000dfe:	b2db      	uxtb	r3, r3
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	40021000 	.word	0x40021000

08000e0c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	22f8      	movs	r2, #248	; 0xf8
 8000e1a:	4393      	bics	r3, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	00da      	lsls	r2, r3, #3
 8000e22:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000e24:	430a      	orrs	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000

08000e34 <LL_RCC_HSI14_Enable>:
  * @brief  Enable HSI14
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <LL_RCC_HSI14_Enable+0x18>)
 8000e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <LL_RCC_HSI14_Enable+0x18>)
 8000e3e:	2101      	movs	r1, #1
 8000e40:	430a      	orrs	r2, r1
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40021000 	.word	0x40021000

08000e50 <LL_RCC_HSI14_IsReady>:
  * @brief  Check if HSI14 oscillator Ready
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <LL_RCC_HSI14_IsReady+0x1c>)
 8000e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	425a      	negs	r2, r3
 8000e60:	4153      	adcs	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40021000 	.word	0x40021000

08000e70 <LL_RCC_HSI14_EnableADCControl>:
  * @brief  ADC interface can turn on the HSI14 oscillator
  * @rmtoll CR2          HSI14DIS      LL_RCC_HSI14_EnableADCControl
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_EnableADCControl(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <LL_RCC_HSI14_EnableADCControl+0x18>)
 8000e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <LL_RCC_HSI14_EnableADCControl+0x18>)
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40021000 	.word	0x40021000

08000e8c <LL_RCC_HSI14_SetCalibTrimming>:
  * @rmtoll CR2          HSI14TRIM     LL_RCC_HSI14_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 8000e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e98:	22f8      	movs	r2, #248	; 0xf8
 8000e9a:	4393      	bics	r3, r2
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <LL_RCC_SetSysClkSource+0x24>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4393      	bics	r3, r2
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <LL_RCC_SetSysClkSource+0x24>)
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	605a      	str	r2, [r3, #4]
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <LL_RCC_GetSysClkSource+0x14>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	220c      	movs	r2, #12
 8000ee6:	4013      	ands	r3, r2
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <LL_RCC_SetAHBPrescaler+0x24>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	22f0      	movs	r2, #240	; 0xf0
 8000f02:	4393      	bics	r3, r2
 8000f04:	0019      	movs	r1, r3
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	605a      	str	r2, [r3, #4]
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40021000 	.word	0x40021000

08000f1c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	605a      	str	r2, [r3, #4]
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40021000 	.word	0x40021000
 8000f44:	fffff8ff 	.word	0xfffff8ff

08000f48 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <LL_RCC_SetUSARTClockSource+0x30>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	0e12      	lsrs	r2, r2, #24
 8000f58:	2103      	movs	r1, #3
 8000f5a:	4091      	lsls	r1, r2
 8000f5c:	000a      	movs	r2, r1
 8000f5e:	43d2      	mvns	r2, r2
 8000f60:	401a      	ands	r2, r3
 8000f62:	0011      	movs	r1, r2
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	0a1a      	lsrs	r2, r3, #8
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <LL_RCC_SetUSARTClockSource+0x30>)
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000

08000f7c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <LL_RCC_PLL_Enable+0x18>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <LL_RCC_PLL_Enable+0x18>)
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	0449      	lsls	r1, r1, #17
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	601a      	str	r2, [r3, #0]
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000

08000f98 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <LL_RCC_PLL_IsReady+0x24>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	049b      	lsls	r3, r3, #18
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	22fe      	movs	r2, #254	; 0xfe
 8000fa8:	0612      	lsls	r2, r2, #24
 8000faa:	4694      	mov	ip, r2
 8000fac:	4463      	add	r3, ip
 8000fae:	425a      	negs	r2, r3
 8000fb0:	4153      	adcs	r3, r2
 8000fb2:	b2db      	uxtb	r3, r3
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	025b      	lsls	r3, r3, #9
 8000fda:	401a      	ands	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	220f      	movs	r2, #15
 8000fec:	4393      	bics	r3, r2
 8000fee:	0019      	movs	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	4b03      	ldr	r3, [pc, #12]	; (8001004 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000
 8001008:	ffc2ffff 	.word	0xffc2ffff

0800100c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001016:	6959      	ldr	r1, [r3, #20]
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <LL_AHB1_GRP1_EnableClock+0x28>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	430a      	orrs	r2, r1
 800101e:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b004      	add	sp, #16
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000

08001038 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <LL_APB1_GRP1_EnableClock+0x28>)
 8001042:	69d9      	ldr	r1, [r3, #28]
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <LL_APB1_GRP1_EnableClock+0x28>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	430a      	orrs	r2, r1
 800104a:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <LL_APB1_GRP1_EnableClock+0x28>)
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b004      	add	sp, #16
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000

08001064 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <LL_APB1_GRP2_EnableClock+0x28>)
 800106e:	6999      	ldr	r1, [r3, #24]
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <LL_APB1_GRP2_EnableClock+0x28>)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	430a      	orrs	r2, r1
 8001076:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <LL_APB1_GRP2_EnableClock+0x28>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4013      	ands	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b004      	add	sp, #16
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000

08001090 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <LL_FLASH_SetLatency+0x24>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2201      	movs	r2, #1
 800109e:	4393      	bics	r3, r2
 80010a0:	0019      	movs	r1, r3
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <LL_FLASH_SetLatency+0x24>)
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40022000 	.word	0x40022000

080010b8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <LL_FLASH_GetLatency+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2201      	movs	r2, #1
 80010c2:	4013      	ands	r3, r2
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	40022000 	.word	0x40022000

080010d0 <LL_TIM_EnableARRPreload>:
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}

080010ec <LL_TIM_SetClockSource>:
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <LL_TIM_SetClockSource+0x24>)
 80010fc:	401a      	ands	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	609a      	str	r2, [r3, #8]
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	ffffbff8 	.word	0xffffbff8

08001114 <LL_TIM_SetTriggerOutput>:
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2270      	movs	r2, #112	; 0x70
 8001124:	4393      	bics	r3, r2
 8001126:	001a      	movs	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	431a      	orrs	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	605a      	str	r2, [r3, #4]
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}

08001138 <LL_TIM_DisableMasterSlaveMode>:
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	4393      	bics	r3, r2
 8001148:	001a      	movs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	609a      	str	r2, [r3, #8]
}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}

08001156 <LL_USART_Enable>:
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <LL_USART_ConfigAsyncMode>:
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <LL_USART_ConfigAsyncMode+0x2c>)
 8001182:	401a      	ands	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2208      	movs	r2, #8
 800118e:	4393      	bics	r3, r2
 8001190:	001a      	movs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	609a      	str	r2, [r3, #8]
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	fffff7ff 	.word	0xfffff7ff

080011a4 <LL_USART_DisableIT_CTS>:
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011ac:	f3ef 8310 	mrs	r3, PRIMASK
 80011b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80011b2:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	2301      	movs	r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f383 8810 	msr	PRIMASK, r3
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <LL_USART_DisableIT_CTS+0x40>)
 80011c8:	401a      	ands	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	f383 8810 	msr	PRIMASK, r3
}
 80011d8:	46c0      	nop			; (mov r8, r8)
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b006      	add	sp, #24
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	fffffbff 	.word	0xfffffbff

080011e8 <LL_GPIO_ResetOutputPin>:
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff ff2d 	bl	8001064 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	055b      	lsls	r3, r3, #21
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff ff12 	bl	8001038 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8001214:	2301      	movs	r3, #1
 8001216:	425b      	negs	r3, r3
 8001218:	2103      	movs	r1, #3
 800121a:	0018      	movs	r0, r3
 800121c:	f7ff fc3e 	bl	8000a9c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001220:	f000 f810 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001224:	f000 f9e6 	bl	80015f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001228:	f000 f9d4 	bl	80015d4 <MX_DMA_Init>
  MX_ADC_Init();
 800122c:	f000 f85a 	bl	80012e4 <MX_ADC_Init>
  MX_TIM1_Init();
 8001230:	f000 f90c 	bl	800144c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001234:	f000 f950 	bl	80014d8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  run();
 8001238:	f7ff fa1e 	bl	8000678 <run>
 800123c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff ff21 	bl	8001090 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	f7ff ff32 	bl	80010b8 <LL_FLASH_GetLatency>
 8001254:	0003      	movs	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d1fa      	bne.n	8001250 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800125a:	f7ff fdb9 	bl	8000dd0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	f7ff fdc4 	bl	8000dec <LL_RCC_HSI_IsReady>
 8001264:	0003      	movs	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	d1fa      	bne.n	8001260 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800126a:	2010      	movs	r0, #16
 800126c:	f7ff fdce 	bl	8000e0c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI14_Enable();
 8001270:	f7ff fde0 	bl	8000e34 <LL_RCC_HSI14_Enable>

   /* Wait till HSI14 is ready */
  while(LL_RCC_HSI14_IsReady() != 1)
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	f7ff fdeb 	bl	8000e50 <LL_RCC_HSI14_IsReady>
 800127a:	0003      	movs	r3, r0
 800127c:	2b01      	cmp	r3, #1
 800127e:	d1fa      	bne.n	8001276 <SystemClock_Config+0x32>
  {

  }
  LL_RCC_HSI14_SetCalibTrimming(16);
 8001280:	2010      	movs	r0, #16
 8001282:	f7ff fe03 	bl	8000e8c <LL_RCC_HSI14_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 8001286:	23a0      	movs	r3, #160	; 0xa0
 8001288:	039b      	lsls	r3, r3, #14
 800128a:	0019      	movs	r1, r3
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fe97 	bl	8000fc0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001292:	f7ff fe73 	bl	8000f7c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	f7ff fe7e 	bl	8000f98 <LL_RCC_PLL_IsReady>
 800129c:	0003      	movs	r3, r0
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d1fa      	bne.n	8001298 <SystemClock_Config+0x54>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fe26 	bl	8000ef4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fe37 	bl	8000f1c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80012ae:	2002      	movs	r0, #2
 80012b0:	f7ff fe00 	bl	8000eb4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	f7ff fe11 	bl	8000edc <LL_RCC_GetSysClkSource>
 80012ba:	0003      	movs	r3, r0
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d1fa      	bne.n	80012b6 <SystemClock_Config+0x72>
  {

  }
  LL_Init1msTick(48000000);
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <SystemClock_Config+0x9c>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 ff34 	bl	8002130 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SystemClock_Config+0x9c>)
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 ff40 	bl	8002150 <LL_SetSystemCoreClock>
  LL_RCC_HSI14_EnableADCControl();
 80012d0:	f7ff fdce 	bl	8000e70 <LL_RCC_HSI14_EnableADCControl>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fe37 	bl	8000f48 <LL_RCC_SetUSARTClockSource>
}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	02dc6c00 	.word	0x02dc6c00

080012e4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b090      	sub	sp, #64	; 0x40
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80012ea:	2530      	movs	r5, #48	; 0x30
 80012ec:	197b      	adds	r3, r7, r5
 80012ee:	0018      	movs	r0, r3
 80012f0:	2310      	movs	r3, #16
 80012f2:	001a      	movs	r2, r3
 80012f4:	2100      	movs	r1, #0
 80012f6:	f000 ff5d 	bl	80021b4 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80012fa:	241c      	movs	r4, #28
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	0018      	movs	r0, r3
 8001300:	2314      	movs	r3, #20
 8001302:	001a      	movs	r2, r3
 8001304:	2100      	movs	r1, #0
 8001306:	f000 ff55 	bl	80021b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	0018      	movs	r0, r3
 800130e:	2318      	movs	r3, #24
 8001310:	001a      	movs	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	f000 ff4e 	bl	80021b4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff fea1 	bl	8001064 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff fe70 	bl	800100c <LL_AHB1_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA0   ------> ADC_IN0
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2203      	movs	r2, #3
 8001336:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	1d3a      	adds	r2, r7, #4
 8001340:	2390      	movs	r3, #144	; 0x90
 8001342:	05db      	lsls	r3, r3, #23
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f000 fbc5 	bl	8001ad6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2202      	movs	r2, #2
 8001350:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2203      	movs	r2, #3
 8001356:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	1d3a      	adds	r2, r7, #4
 8001360:	2390      	movs	r3, #144	; 0x90
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f000 fbb5 	bl	8001ad6 <LL_GPIO_Init>

  /* ADC DMA Init */

  /* ADC Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800136c:	4b34      	ldr	r3, [pc, #208]	; (8001440 <MX_ADC_Init+0x15c>)
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	0018      	movs	r0, r3
 8001374:	f7ff fc36 	bl	8000be4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8001378:	4b31      	ldr	r3, [pc, #196]	; (8001440 <MX_ADC_Init+0x15c>)
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff fd02 	bl	8000d88 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <MX_ADC_Init+0x15c>)
 8001386:	2220      	movs	r2, #32
 8001388:	2101      	movs	r1, #1
 800138a:	0018      	movs	r0, r3
 800138c:	f7ff fc4e 	bl	8000c2c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <MX_ADC_Init+0x15c>)
 8001392:	2200      	movs	r2, #0
 8001394:	2101      	movs	r1, #1
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff fc6a 	bl	8000c70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <MX_ADC_Init+0x15c>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	2101      	movs	r1, #1
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff fc86 	bl	8000cb4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4824      	ldr	r0, [pc, #144]	; (8001440 <MX_ADC_Init+0x15c>)
 80013ae:	001a      	movs	r2, r3
 80013b0:	2101      	movs	r1, #1
 80013b2:	f7ff fca1 	bl	8000cf8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4821      	ldr	r0, [pc, #132]	; (8001440 <MX_ADC_Init+0x15c>)
 80013bc:	001a      	movs	r2, r3
 80013be:	2101      	movs	r1, #1
 80013c0:	f7ff fcbe 	bl	8000d40 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 80013c4:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <MX_ADC_Init+0x160>)
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <MX_ADC_Init+0x164>)
 80013c8:	0011      	movs	r1, r2
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff fbf8 	bl	8000bc0 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  ADC_InitStruct.Clock = LL_ADC_CLOCK_ASYNC;
 80013d0:	0029      	movs	r1, r5
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	4a16      	ldr	r2, [pc, #88]	; (8001448 <MX_ADC_Init+0x164>)
 80013ee:	0019      	movs	r1, r3
 80013f0:	0010      	movs	r0, r2
 80013f2:	f000 fa4f 	bl	8001894 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80013f6:	0021      	movs	r1, r4
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001404:	187b      	adds	r3, r7, r1
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2201      	movs	r2, #1
 800140e:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001416:	187b      	adds	r3, r7, r1
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <MX_ADC_Init+0x164>)
 800141a:	0019      	movs	r1, r3
 800141c:	0010      	movs	r0, r2
 800141e:	f000 fa6f 	bl	8001900 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_ADC_Init+0x164>)
 8001424:	2100      	movs	r1, #0
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff fbb8 	bl	8000b9c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_55CYCLES_5);
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_ADC_Init+0x164>)
 800142e:	2105      	movs	r1, #5
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff fba1 	bl	8000b78 <LL_ADC_SetSamplingTimeCommonChannels>
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b010      	add	sp, #64	; 0x40
 800143c:	bdb0      	pop	{r4, r5, r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	40020000 	.word	0x40020000
 8001444:	04000002 	.word	0x04000002
 8001448:	40012400 	.word	0x40012400

0800144c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	0018      	movs	r0, r3
 8001456:	2314      	movs	r3, #20
 8001458:	001a      	movs	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	f000 feaa 	bl	80021b4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM1);
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff fdfd 	bl	8001064 <LL_APB1_GRP2_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0);
 800146a:	2100      	movs	r1, #0
 800146c:	200d      	movs	r0, #13
 800146e:	f7ff fb15 	bl	8000a9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001472:	200d      	movs	r0, #13
 8001474:	f7ff faf8 	bl	8000a68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 4799;
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_TIM1_Init+0x84>)
 8001488:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <MX_TIM1_Init+0x88>)
 800149a:	0019      	movs	r1, r3
 800149c:	0010      	movs	r0, r2
 800149e:	f000 fcf1 	bl	8001e84 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_TIM1_Init+0x88>)
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff fe13 	bl	80010d0 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_TIM1_Init+0x88>)
 80014ac:	2100      	movs	r1, #0
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff fe1c 	bl	80010ec <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_UPDATE);
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MX_TIM1_Init+0x88>)
 80014b6:	2120      	movs	r1, #32
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fe2b 	bl	8001114 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <MX_TIM1_Init+0x88>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff fe39 	bl	8001138 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b006      	add	sp, #24
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	000012bf 	.word	0x000012bf
 80014d4:	40012c00 	.word	0x40012c00

080014d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b08f      	sub	sp, #60	; 0x3c
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80014de:	241c      	movs	r4, #28
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	0018      	movs	r0, r3
 80014e4:	231c      	movs	r3, #28
 80014e6:	001a      	movs	r2, r3
 80014e8:	2100      	movs	r1, #0
 80014ea:	f000 fe63 	bl	80021b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	0018      	movs	r0, r3
 80014f2:	2318      	movs	r3, #24
 80014f4:	001a      	movs	r2, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	f000 fe5c 	bl	80021b4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	01db      	lsls	r3, r3, #7
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff fdaf 	bl	8001064 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff fd7e 	bl	800100c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA2   ------> USART1_TX
  PA3   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2204      	movs	r2, #4
 8001514:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2202      	movs	r2, #2
 800151a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2203      	movs	r2, #3
 8001520:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2201      	movs	r2, #1
 8001532:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	1d3a      	adds	r2, r7, #4
 8001536:	2390      	movs	r3, #144	; 0x90
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	0011      	movs	r1, r2
 800153c:	0018      	movs	r0, r3
 800153e:	f000 faca 	bl	8001ad6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2208      	movs	r2, #8
 8001546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2202      	movs	r2, #2
 800154c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2203      	movs	r2, #3
 8001552:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2201      	movs	r2, #1
 8001564:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	1d3a      	adds	r2, r7, #4
 8001568:	2390      	movs	r3, #144	; 0x90
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	0011      	movs	r1, r2
 800156e:	0018      	movs	r0, r3
 8001570:	f000 fab1 	bl	8001ad6 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8001574:	193b      	adds	r3, r7, r4
 8001576:	2296      	movs	r2, #150	; 0x96
 8001578:	0192      	lsls	r2, r2, #6
 800157a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800157c:	0021      	movs	r1, r4
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	220c      	movs	r2, #12
 8001594:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <MX_USART1_UART_Init+0xf8>)
 80015a6:	0019      	movs	r1, r3
 80015a8:	0010      	movs	r0, r2
 80015aa:	f000 fd4f 	bl	800204c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART1_UART_Init+0xf8>)
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff fdf7 	bl	80011a4 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART1_UART_Init+0xf8>)
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff fddb 	bl	8001174 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <MX_USART1_UART_Init+0xf8>)
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff fdc8 	bl	8001156 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b00f      	add	sp, #60	; 0x3c
 80015cc:	bd90      	pop	{r4, r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	40013800 	.word	0x40013800

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fd17 	bl	800100c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 80015de:	2100      	movs	r1, #0
 80015e0:	2009      	movs	r0, #9
 80015e2:	f7ff fa5b 	bl	8000a9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015e6:	2009      	movs	r0, #9
 80015e8:	f7ff fa3e 	bl	8000a68 <__NVIC_EnableIRQ>

}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	003b      	movs	r3, r7
 80015fc:	0018      	movs	r0, r3
 80015fe:	2318      	movs	r3, #24
 8001600:	001a      	movs	r2, r3
 8001602:	2100      	movs	r1, #0
 8001604:	f000 fdd6 	bl	80021b4 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff fcfd 	bl	800100c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	02db      	lsls	r3, r3, #11
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff fcf8 	bl	800100c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SB_A0_GPIO_Port, SB_A0_Pin);
 800161c:	2390      	movs	r3, #144	; 0x90
 800161e:	05db      	lsls	r3, r3, #23
 8001620:	2110      	movs	r1, #16
 8001622:	0018      	movs	r0, r3
 8001624:	f7ff fde0 	bl	80011e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SB_A4_GPIO_Port, SB_A4_Pin);
 8001628:	2390      	movs	r3, #144	; 0x90
 800162a:	05db      	lsls	r3, r3, #23
 800162c:	2120      	movs	r1, #32
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff fdda 	bl	80011e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SB_A3_GPIO_Port, SB_A3_Pin);
 8001634:	2390      	movs	r3, #144	; 0x90
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	2140      	movs	r1, #64	; 0x40
 800163a:	0018      	movs	r0, r3
 800163c:	f7ff fdd4 	bl	80011e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SB_A2_GPIO_Port, SB_A2_Pin);
 8001640:	2390      	movs	r3, #144	; 0x90
 8001642:	05db      	lsls	r3, r3, #23
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff fdce 	bl	80011e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SB_A1_GPIO_Port, SB_A1_Pin);
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <MX_GPIO_Init+0x1a4>)
 800164e:	2102      	movs	r1, #2
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fdc9 	bl	80011e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	00da      	lsls	r2, r3, #3
 800165a:	2390      	movs	r3, #144	; 0x90
 800165c:	05db      	lsls	r3, r3, #23
 800165e:	0011      	movs	r1, r2
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff fdc1 	bl	80011e8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SB_A0_Pin;
 8001666:	003b      	movs	r3, r7
 8001668:	2210      	movs	r2, #16
 800166a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800166c:	003b      	movs	r3, r7
 800166e:	2201      	movs	r2, #1
 8001670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001672:	003b      	movs	r3, r7
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001678:	003b      	movs	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800167e:	003b      	movs	r3, r7
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SB_A0_GPIO_Port, &GPIO_InitStruct);
 8001684:	003a      	movs	r2, r7
 8001686:	2390      	movs	r3, #144	; 0x90
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f000 fa22 	bl	8001ad6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SB_A4_Pin;
 8001692:	003b      	movs	r3, r7
 8001694:	2220      	movs	r2, #32
 8001696:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001698:	003b      	movs	r3, r7
 800169a:	2201      	movs	r2, #1
 800169c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800169e:	003b      	movs	r3, r7
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016a4:	003b      	movs	r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016aa:	003b      	movs	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SB_A4_GPIO_Port, &GPIO_InitStruct);
 80016b0:	003a      	movs	r2, r7
 80016b2:	2390      	movs	r3, #144	; 0x90
 80016b4:	05db      	lsls	r3, r3, #23
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f000 fa0c 	bl	8001ad6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SB_A3_Pin;
 80016be:	003b      	movs	r3, r7
 80016c0:	2240      	movs	r2, #64	; 0x40
 80016c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016c4:	003b      	movs	r3, r7
 80016c6:	2201      	movs	r2, #1
 80016c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016ca:	003b      	movs	r3, r7
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016d0:	003b      	movs	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016d6:	003b      	movs	r3, r7
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SB_A3_GPIO_Port, &GPIO_InitStruct);
 80016dc:	003a      	movs	r2, r7
 80016de:	2390      	movs	r3, #144	; 0x90
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	0011      	movs	r1, r2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 f9f6 	bl	8001ad6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SB_A2_Pin;
 80016ea:	003b      	movs	r3, r7
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016f0:	003b      	movs	r3, r7
 80016f2:	2201      	movs	r2, #1
 80016f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016f6:	003b      	movs	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016fc:	003b      	movs	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001702:	003b      	movs	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SB_A2_GPIO_Port, &GPIO_InitStruct);
 8001708:	003a      	movs	r2, r7
 800170a:	2390      	movs	r3, #144	; 0x90
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	0011      	movs	r1, r2
 8001710:	0018      	movs	r0, r3
 8001712:	f000 f9e0 	bl	8001ad6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SB_A1_Pin;
 8001716:	003b      	movs	r3, r7
 8001718:	2202      	movs	r2, #2
 800171a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800171c:	003b      	movs	r3, r7
 800171e:	2201      	movs	r2, #1
 8001720:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001722:	003b      	movs	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001728:	003b      	movs	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800172e:	003b      	movs	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SB_A1_GPIO_Port, &GPIO_InitStruct);
 8001734:	003b      	movs	r3, r7
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <MX_GPIO_Init+0x1a4>)
 8001738:	0019      	movs	r1, r3
 800173a:	0010      	movs	r0, r2
 800173c:	f000 f9cb 	bl	8001ad6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_Pin;
 8001740:	003b      	movs	r3, r7
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001748:	003b      	movs	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800174e:	003b      	movs	r3, r7
 8001750:	2201      	movs	r2, #1
 8001752:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001754:	003a      	movs	r2, r7
 8001756:	2390      	movs	r3, #144	; 0x90
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f000 f9ba 	bl	8001ad6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8001762:	003b      	movs	r3, r7
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	00d2      	lsls	r2, r2, #3
 8001768:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800176a:	003b      	movs	r3, r7
 800176c:	2201      	movs	r2, #1
 800176e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001770:	003b      	movs	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001776:	003b      	movs	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800177c:	003b      	movs	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001782:	003a      	movs	r2, r7
 8001784:	2390      	movs	r3, #144	; 0x90
 8001786:	05db      	lsls	r3, r3, #23
 8001788:	0011      	movs	r1, r2
 800178a:	0018      	movs	r0, r3
 800178c:	f000 f9a3 	bl	8001ad6 <LL_GPIO_Init>

}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b006      	add	sp, #24
 8001796:	bd80      	pop	{r7, pc}
 8001798:	48000400 	.word	0x48000400

0800179c <LL_TIM_ClearFlag_UPDATE>:
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4252      	negs	r2, r2
 80017aa:	611a      	str	r2, [r3, #16]
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	ms++;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <SysTick_Handler+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <SysTick_Handler+0x14>)
 80017e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200000c0 	.word	0x200000c0

080017ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM1);
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f7ff ffcc 	bl	800179c <LL_TIM_ClearFlag_UPDATE>

	nextSequence();
 8001804:	f7fe fdf0 	bl	80003e8 <nextSequence>

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	40012c00 	.word	0x40012c00

08001814 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001822:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <LoopForever+0x6>)
  ldr r1, =_edata
 8001826:	490e      	ldr	r1, [pc, #56]	; (8001860 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001828:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <LoopForever+0xe>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <LoopForever+0x12>)
  ldr r4, =_ebss
 800183c:	4c0b      	ldr	r4, [pc, #44]	; (800186c <LoopForever+0x16>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800184a:	f7ff ffe3 	bl	8001814 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800184e:	f000 fc8d 	bl	800216c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001852:	f7ff fcd5 	bl	8001200 <main>

08001856 <LoopForever>:

LoopForever:
    b LoopForever
 8001856:	e7fe      	b.n	8001856 <LoopForever>
  ldr   r0, =_estack
 8001858:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001860:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001864:	08002204 	.word	0x08002204
  ldr r2, =_sbss
 8001868:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800186c:	2000025c 	.word	0x2000025c

08001870 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC1_IRQHandler>

08001872 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2201      	movs	r2, #1
 8001880:	4013      	ands	r3, r2
 8001882:	3b01      	subs	r3, #1
 8001884:	425a      	negs	r2, r3
 8001886:	4153      	adcs	r3, r2
 8001888:	b2db      	uxtb	r3, r3
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800189e:	230f      	movs	r3, #15
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff ffe2 	bl	8001872 <LL_ADC_IsEnabled>
 80018ae:	1e03      	subs	r3, r0, #0
 80018b0:	d118      	bne.n	80018e4 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4a11      	ldr	r2, [pc, #68]	; (80018fc <LL_ADC_Init+0x68>)
 80018b8:	401a      	ands	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6859      	ldr	r1, [r3, #4]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	4319      	orrs	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	430b      	orrs	r3, r1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	089a      	lsrs	r2, r3, #2
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	e003      	b.n	80018ec <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80018e4:	230f      	movs	r3, #15
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80018ec:	230f      	movs	r3, #15
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	781b      	ldrb	r3, [r3, #0]
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b004      	add	sp, #16
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	ffff3fc7 	.word	0xffff3fc7

08001900 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800190a:	230f      	movs	r3, #15
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff ffac 	bl	8001872 <LL_ADC_IsEnabled>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d115      	bne.n	800194a <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <LL_ADC_REG_Init+0x60>)
 8001924:	401a      	ands	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6819      	ldr	r1, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4319      	orrs	r1, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4319      	orrs	r1, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	4319      	orrs	r1, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	430b      	orrs	r3, r1
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	e003      	b.n	8001952 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800194a:	230f      	movs	r3, #15
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001952:	230f      	movs	r3, #15
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	781b      	ldrb	r3, [r3, #0]
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b004      	add	sp, #16
 800195e:	bd80      	pop	{r7, pc}
 8001960:	fffec23c 	.word	0xfffec23c

08001964 <LL_GPIO_SetPinMode>:
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	435b      	muls	r3, r3
 8001978:	001a      	movs	r2, r3
 800197a:	0013      	movs	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	189b      	adds	r3, r3, r2
 8001980:	43db      	mvns	r3, r3
 8001982:	400b      	ands	r3, r1
 8001984:	001a      	movs	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	435b      	muls	r3, r3
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	434b      	muls	r3, r1
 800198e:	431a      	orrs	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}

0800199c <LL_GPIO_SetPinOutputType>:
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	43d2      	mvns	r2, r2
 80019b0:	401a      	ands	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	434b      	muls	r3, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	605a      	str	r2, [r3, #4]
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b004      	add	sp, #16
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <LL_GPIO_SetPinSpeed>:
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6899      	ldr	r1, [r3, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	435b      	muls	r3, r3
 80019da:	001a      	movs	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	189b      	adds	r3, r3, r2
 80019e2:	43db      	mvns	r3, r3
 80019e4:	400b      	ands	r3, r1
 80019e6:	001a      	movs	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	435b      	muls	r3, r3
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	434b      	muls	r3, r1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	609a      	str	r2, [r3, #8]
}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b004      	add	sp, #16
 80019fc:	bd80      	pop	{r7, pc}

080019fe <LL_GPIO_SetPinPull>:
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	68d9      	ldr	r1, [r3, #12]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	435b      	muls	r3, r3
 8001a12:	001a      	movs	r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	189b      	adds	r3, r3, r2
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	001a      	movs	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	435b      	muls	r3, r3
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	434b      	muls	r3, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	60da      	str	r2, [r3, #12]
}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b004      	add	sp, #16
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <LL_GPIO_SetAFPin_0_7>:
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a19      	ldr	r1, [r3, #32]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	435b      	muls	r3, r3
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	4353      	muls	r3, r2
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	435a      	muls	r2, r3
 8001a52:	0013      	movs	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	400b      	ands	r3, r1
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	435b      	muls	r3, r3
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	434b      	muls	r3, r1
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	434b      	muls	r3, r1
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	434b      	muls	r3, r1
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	621a      	str	r2, [r3, #32]
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <LL_GPIO_SetAFPin_8_15>:
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	0a12      	lsrs	r2, r2, #8
 8001a94:	4353      	muls	r3, r2
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	0a12      	lsrs	r2, r2, #8
 8001a9a:	4353      	muls	r3, r2
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	0a12      	lsrs	r2, r2, #8
 8001aa0:	435a      	muls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	400b      	ands	r3, r1
 8001aac:	001a      	movs	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	0a09      	lsrs	r1, r1, #8
 8001ab6:	434b      	muls	r3, r1
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	0a09      	lsrs	r1, r1, #8
 8001abc:	434b      	muls	r3, r1
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	0a09      	lsrs	r1, r1, #8
 8001ac2:	434b      	muls	r3, r1
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	434b      	muls	r3, r1
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b004      	add	sp, #16
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ae4:	e048      	b.n	8001b78 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2101      	movs	r1, #1
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4091      	lsls	r1, r2
 8001af0:	000a      	movs	r2, r1
 8001af2:	4013      	ands	r3, r2
 8001af4:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03a      	beq.n	8001b72 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d003      	beq.n	8001b0c <LL_GPIO_Init+0x36>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d10e      	bne.n	8001b2a <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff ff56 	bl	80019c6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff ff39 	bl	800199c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7ff ff63 	bl	80019fe <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d111      	bne.n	8001b64 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2bff      	cmp	r3, #255	; 0xff
 8001b44:	d807      	bhi.n	8001b56 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f7ff ff71 	bl	8001a36 <LL_GPIO_SetAFPin_0_7>
 8001b54:	e006      	b.n	8001b64 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7ff ff8c 	bl	8001a7c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff fef9 	bl	8001964 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3301      	adds	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	40da      	lsrs	r2, r3
 8001b80:	1e13      	subs	r3, r2, #0
 8001b82:	d1b0      	bne.n	8001ae6 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <LL_RCC_HSI_IsReady>:
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <LL_RCC_HSI_IsReady+0x1c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	3b02      	subs	r3, #2
 8001b9e:	425a      	negs	r2, r3
 8001ba0:	4153      	adcs	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	40021000 	.word	0x40021000

08001bb0 <LL_RCC_LSE_IsReady>:
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <LL_RCC_LSE_IsReady+0x1c>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	3b02      	subs	r3, #2
 8001bbe:	425a      	negs	r2, r3
 8001bc0:	4153      	adcs	r3, r2
 8001bc2:	b2db      	uxtb	r3, r3
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <LL_RCC_GetSysClkSource>:
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <LL_RCC_GetSysClkSource+0x14>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	220c      	movs	r2, #12
 8001bda:	4013      	ands	r3, r2
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	40021000 	.word	0x40021000

08001be8 <LL_RCC_GetAHBPrescaler>:
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <LL_RCC_GetAHBPrescaler+0x14>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	22f0      	movs	r2, #240	; 0xf0
 8001bf2:	4013      	ands	r3, r2
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	40021000 	.word	0x40021000

08001c00 <LL_RCC_GetAPB1Prescaler>:
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	23e0      	movs	r3, #224	; 0xe0
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4013      	ands	r3, r2
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000

08001c18 <LL_RCC_GetUSARTClockSource>:
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <LL_RCC_GetUSARTClockSource+0x24>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	2103      	movs	r1, #3
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4091      	lsls	r1, r2
 8001c2a:	000a      	movs	r2, r1
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	4313      	orrs	r3, r2
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000

08001c40 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <LL_RCC_PLL_GetMainSource+0x14>)
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	025b      	lsls	r3, r3, #9
 8001c4c:	4013      	ands	r3, r2
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000

08001c58 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	23f0      	movs	r3, #240	; 0xf0
 8001c62:	039b      	lsls	r3, r3, #14
 8001c64:	4013      	ands	r3, r2
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000

08001c70 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <LL_RCC_PLL_GetPrediv+0x14>)
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	220f      	movs	r2, #15
 8001c7a:	4013      	ands	r3, r2
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	40021000 	.word	0x40021000

08001c88 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d12d      	bne.n	8001cf6 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff ffbb 	bl	8001c18 <LL_RCC_GetUSARTClockSource>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d00a      	beq.n	8001cbe <LL_RCC_GetUSARTClockFreq+0x36>
 8001ca8:	d818      	bhi.n	8001cdc <LL_RCC_GetUSARTClockFreq+0x54>
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d002      	beq.n	8001cb4 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d00c      	beq.n	8001ccc <LL_RCC_GetUSARTClockFreq+0x44>
 8001cb2:	e013      	b.n	8001cdc <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001cb4:	f000 f82c 	bl	8001d10 <RCC_GetSystemClockFreq>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]
        break;
 8001cbc:	e020      	b.n	8001d00 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001cbe:	f7ff ff67 	bl	8001b90 <LL_RCC_HSI_IsReady>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d019      	beq.n	8001cfa <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <LL_RCC_GetUSARTClockFreq+0x84>)
 8001cc8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001cca:	e016      	b.n	8001cfa <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001ccc:	f7ff ff70 	bl	8001bb0 <LL_RCC_LSE_IsReady>
 8001cd0:	1e03      	subs	r3, r0, #0
 8001cd2:	d014      	beq.n	8001cfe <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001cda:	e010      	b.n	8001cfe <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001cdc:	f000 f818 	bl	8001d10 <RCC_GetSystemClockFreq>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f000 f83a 	bl	8001d5c <RCC_GetHCLKClockFreq>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	0018      	movs	r0, r3
 8001cec:	f000 f84c 	bl	8001d88 <RCC_GetPCLK1ClockFreq>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]
        break;
 8001cf4:	e004      	b.n	8001d00 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	e002      	b.n	8001d00 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	e000      	b.n	8001d00 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001cfe:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001d00:	68fb      	ldr	r3, [r7, #12]
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b004      	add	sp, #16
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	007a1200 	.word	0x007a1200

08001d10 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001d1a:	f7ff ff59 	bl	8001bd0 <LL_RCC_GetSysClkSource>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d00b      	beq.n	8001d3c <RCC_GetSystemClockFreq+0x2c>
 8001d24:	d80f      	bhi.n	8001d46 <RCC_GetSystemClockFreq+0x36>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <RCC_GetSystemClockFreq+0x20>
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d003      	beq.n	8001d36 <RCC_GetSystemClockFreq+0x26>
 8001d2e:	e00a      	b.n	8001d46 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <RCC_GetSystemClockFreq+0x48>)
 8001d32:	607b      	str	r3, [r7, #4]
      break;
 8001d34:	e00a      	b.n	8001d4c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <RCC_GetSystemClockFreq+0x48>)
 8001d38:	607b      	str	r3, [r7, #4]
      break;
 8001d3a:	e007      	b.n	8001d4c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001d3c:	f000 f838 	bl	8001db0 <RCC_PLL_GetFreqDomain_SYS>
 8001d40:	0003      	movs	r3, r0
 8001d42:	607b      	str	r3, [r7, #4]
      break;
 8001d44:	e002      	b.n	8001d4c <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <RCC_GetSystemClockFreq+0x48>)
 8001d48:	607b      	str	r3, [r7, #4]
      break;
 8001d4a:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	007a1200 	.word	0x007a1200

08001d5c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001d64:	f7ff ff40 	bl	8001be8 <LL_RCC_GetAHBPrescaler>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	4013      	ands	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <RCC_GetHCLKClockFreq+0x28>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	001a      	movs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	40d3      	lsrs	r3, r2
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b002      	add	sp, #8
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	080021e4 	.word	0x080021e4

08001d88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001d90:	f7ff ff36 	bl	8001c00 <LL_RCC_GetAPB1Prescaler>
 8001d94:	0003      	movs	r3, r0
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <RCC_GetPCLK1ClockFreq+0x24>)
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	40d3      	lsrs	r3, r2
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	080021f4 	.word	0x080021f4

08001db0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001dbe:	f7ff ff3f 	bl	8001c40 <LL_RCC_PLL_GetMainSource>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	025b      	lsls	r3, r3, #9
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d003      	beq.n	8001dde <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001dd6:	e005      	b.n	8001de4 <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001dda:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001ddc:	e005      	b.n	8001dea <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001de0:	607b      	str	r3, [r7, #4]
      break;
 8001de2:	e002      	b.n	8001dea <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001de6:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001de8:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001dea:	f7ff ff41 	bl	8001c70 <LL_RCC_PLL_GetPrediv>
 8001dee:	0003      	movs	r3, r0
 8001df0:	3301      	adds	r3, #1
 8001df2:	0019      	movs	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7fe f987 	bl	8000108 <__udivsi3>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	001c      	movs	r4, r3
 8001dfe:	f7ff ff2b 	bl	8001c58 <LL_RCC_PLL_GetMultiplicator>
 8001e02:	0003      	movs	r3, r0
 8001e04:	0c9b      	lsrs	r3, r3, #18
 8001e06:	220f      	movs	r2, #15
 8001e08:	4013      	ands	r3, r2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b003      	add	sp, #12
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	003d0900 	.word	0x003d0900
 8001e1c:	007a1200 	.word	0x007a1200

08001e20 <LL_TIM_SetPrescaler>:
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b002      	add	sp, #8
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <LL_TIM_SetAutoReload>:
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <LL_TIM_SetRepetitionCounter>:
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b002      	add	sp, #8
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2201      	movs	r2, #1
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	615a      	str	r2, [r3, #20]
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a2c      	ldr	r2, [pc, #176]	; (8001f48 <LL_TIM_Init+0xc4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <LL_TIM_Init+0x20>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <LL_TIM_Init+0xc8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d107      	bne.n	8001eb4 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2270      	movs	r2, #112	; 0x70
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	001a      	movs	r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <LL_TIM_Init+0xc4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00f      	beq.n	8001edc <LL_TIM_Init+0x58>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <LL_TIM_Init+0xc8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00b      	beq.n	8001edc <LL_TIM_Init+0x58>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <LL_TIM_Init+0xcc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <LL_TIM_Init+0x58>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <LL_TIM_Init+0xd0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <LL_TIM_Init+0x58>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <LL_TIM_Init+0xd4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d106      	bne.n	8001eea <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <LL_TIM_Init+0xd8>)
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff ff9d 	bl	8001e38 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	001a      	movs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff ff89 	bl	8001e20 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <LL_TIM_Init+0xc4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <LL_TIM_Init+0xa2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <LL_TIM_Init+0xd0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <LL_TIM_Init+0xa2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <LL_TIM_Init+0xd4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d106      	bne.n	8001f34 <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff ff8e 	bl	8001e50 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7ff ff96 	bl	8001e68 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b004      	add	sp, #16
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	40012c00 	.word	0x40012c00
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40002000 	.word	0x40002000
 8001f54:	40014400 	.word	0x40014400
 8001f58:	40014800 	.word	0x40014800
 8001f5c:	fffffcff 	.word	0xfffffcff

08001f60 <LL_USART_IsEnabled>:
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <LL_USART_IsEnabled+0x18>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <LL_USART_IsEnabled+0x1a>
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <LL_USART_SetStopBitsLength>:
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <LL_USART_SetStopBitsLength+0x24>)
 8001f94:	401a      	ands	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	605a      	str	r2, [r3, #4]
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	ffffcfff 	.word	0xffffcfff

08001fac <LL_USART_SetHWFlowCtrl>:
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <LL_USART_SetHWFlowCtrl+0x24>)
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	fffffcff 	.word	0xfffffcff

08001fd4 <LL_USART_SetBaudRate>:
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d11c      	bne.n	8002026 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	005a      	lsls	r2, r3, #1
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	18d3      	adds	r3, r2, r3
 8001ff6:	6839      	ldr	r1, [r7, #0]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f7fe f885 	bl	8000108 <__udivsi3>
 8001ffe:	0003      	movs	r3, r0
 8002000:	b29b      	uxth	r3, r3
 8002002:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <LL_USART_SetBaudRate+0x74>)
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	001a      	movs	r2, r3
 8002014:	2307      	movs	r3, #7
 8002016:	4013      	ands	r3, r2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	60da      	str	r2, [r3, #12]
}
 8002024:	e00c      	b.n	8002040 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	085a      	lsrs	r2, r3, #1
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	18d3      	adds	r3, r2, r3
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	0018      	movs	r0, r3
 8002032:	f7fe f869 	bl	8000108 <__udivsi3>
 8002036:	0003      	movs	r3, r0
 8002038:	b29b      	uxth	r3, r3
 800203a:	001a      	movs	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	60da      	str	r2, [r3, #12]
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b006      	add	sp, #24
 8002046:	bd80      	pop	{r7, pc}
 8002048:	0000fff0 	.word	0x0000fff0

0800204c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002056:	230f      	movs	r3, #15
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff ff7b 	bl	8001f60 <LL_USART_IsEnabled>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d13b      	bne.n	80020e6 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <LL_USART_Init+0xa8>)
 8002074:	401a      	ands	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4319      	orrs	r1, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	4319      	orrs	r1, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	430b      	orrs	r3, r1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	0011      	movs	r1, r2
 800209a:	0018      	movs	r0, r3
 800209c:	f7ff ff72 	bl	8001f84 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	0011      	movs	r1, r2
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7ff ff7f 	bl	8001fac <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <LL_USART_Init+0xac>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d104      	bne.n	80020c0 <LL_USART_Init+0x74>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff fde6 	bl	8001c88 <LL_RCC_GetUSARTClockFreq>
 80020bc:	0003      	movs	r3, r0
 80020be:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00f      	beq.n	80020e6 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 80020ce:	230f      	movs	r3, #15
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff77 	bl	8001fd4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80020e6:	230f      	movs	r3, #15
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	781b      	ldrb	r3, [r3, #0]
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b004      	add	sp, #16
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	ffff69f3 	.word	0xffff69f3
 80020f8:	40013800 	.word	0x40013800

080020fc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002106:	6839      	ldr	r1, [r7, #0]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fd fffd 	bl	8000108 <__udivsi3>
 800210e:	0003      	movs	r3, r0
 8002110:	001a      	movs	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <LL_InitTick+0x30>)
 8002114:	3a01      	subs	r2, #1
 8002116:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <LL_InitTick+0x30>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b03      	ldr	r3, [pc, #12]	; (800212c <LL_InitTick+0x30>)
 8002120:	2205      	movs	r2, #5
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}
 800212c:	e000e010 	.word	0xe000e010

08002130 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002138:	23fa      	movs	r3, #250	; 0xfa
 800213a:	009a      	lsls	r2, r3, #2
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ffdb 	bl	80020fc <LL_InitTick>
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <LL_SetSystemCoreClock+0x18>)
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b002      	add	sp, #8
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	200000a0 	.word	0x200000a0

0800216c <__libc_init_array>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	2600      	movs	r6, #0
 8002170:	4d0c      	ldr	r5, [pc, #48]	; (80021a4 <__libc_init_array+0x38>)
 8002172:	4c0d      	ldr	r4, [pc, #52]	; (80021a8 <__libc_init_array+0x3c>)
 8002174:	1b64      	subs	r4, r4, r5
 8002176:	10a4      	asrs	r4, r4, #2
 8002178:	42a6      	cmp	r6, r4
 800217a:	d109      	bne.n	8002190 <__libc_init_array+0x24>
 800217c:	2600      	movs	r6, #0
 800217e:	f000 f821 	bl	80021c4 <_init>
 8002182:	4d0a      	ldr	r5, [pc, #40]	; (80021ac <__libc_init_array+0x40>)
 8002184:	4c0a      	ldr	r4, [pc, #40]	; (80021b0 <__libc_init_array+0x44>)
 8002186:	1b64      	subs	r4, r4, r5
 8002188:	10a4      	asrs	r4, r4, #2
 800218a:	42a6      	cmp	r6, r4
 800218c:	d105      	bne.n	800219a <__libc_init_array+0x2e>
 800218e:	bd70      	pop	{r4, r5, r6, pc}
 8002190:	00b3      	lsls	r3, r6, #2
 8002192:	58eb      	ldr	r3, [r5, r3]
 8002194:	4798      	blx	r3
 8002196:	3601      	adds	r6, #1
 8002198:	e7ee      	b.n	8002178 <__libc_init_array+0xc>
 800219a:	00b3      	lsls	r3, r6, #2
 800219c:	58eb      	ldr	r3, [r5, r3]
 800219e:	4798      	blx	r3
 80021a0:	3601      	adds	r6, #1
 80021a2:	e7f2      	b.n	800218a <__libc_init_array+0x1e>
 80021a4:	080021fc 	.word	0x080021fc
 80021a8:	080021fc 	.word	0x080021fc
 80021ac:	080021fc 	.word	0x080021fc
 80021b0:	08002200 	.word	0x08002200

080021b4 <memset>:
 80021b4:	0003      	movs	r3, r0
 80021b6:	1882      	adds	r2, r0, r2
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d100      	bne.n	80021be <memset+0xa>
 80021bc:	4770      	bx	lr
 80021be:	7019      	strb	r1, [r3, #0]
 80021c0:	3301      	adds	r3, #1
 80021c2:	e7f9      	b.n	80021b8 <memset+0x4>

080021c4 <_init>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ca:	bc08      	pop	{r3}
 80021cc:	469e      	mov	lr, r3
 80021ce:	4770      	bx	lr

080021d0 <_fini>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr
